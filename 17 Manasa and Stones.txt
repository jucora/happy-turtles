
// Complete the stones function below.
function stones(n, a, b) {
    
    var stones = [];
        if(a<b){
                for(let j=0;j<n;j++){
                    stones[j] = (n - 1 - j)*a + j*b;
                }
            }else if(a>b){
                for(let j=0;j<n;j++){
                    stones[j] = (n - 1 - j)*b + j*a;
                }
            }else{
                li[0] = (n - 1)*b;
                n = 1;
            }
        
            for(let j=0;j<n;j++){
                console.log(stones[j] + " ");
            }
            console.log("\n");
        
        return stones;
    
}


// Raymond
// Complete the stones function below.
function stones(n, a, b) {
    let countSet = new Set()
    let arr = [a, b];
    
    function helper(n, arr, memo = [0]) {
        if(memo.length === n) {
            countSet.add(memo[memo.length - 1]);
            return;
        }
        for(let i = 0; i < arr.length; i++) {
            let tempMemo = [...memo]
            tempMemo.push(memo[memo.length - 1] + arr[i]);
            helper(n, arr, tempMemo);
        }
    }

    helper(n, arr);
    
    return countSet;
}

// O(n) time complexity solution
function stones(n, a, b) {
    let countSet = new Set()
    
    for(let i = 0; i < n; i++) {
        countSet.add(i * Math.max(a,b) + (n - i - 1) * Math.min(a,b));
    }
    
    return Array.from(countSet);
}